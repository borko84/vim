#----------------------------------------------------------------------------
#ostringstream
#----------------------------------------------------------------------------
snippet oss
	#include <sstream>

	std::ostringstream oss (ostringstream::out);
	oss << "${1}" << $2;
	std::string str = oss.str();
#----------------------------------------------------------------------------
#cast
#----------------------------------------------------------------------------
snippet static_cast
	static_cast<${2}>(${1})  
snippet dynamic_cast
	dynamic_cast<${2}>(${1})   
snippet lexical_cast
	lexical_cast<${2}>(${1})   
#----------------------------------------------------------------------------
#class
#----------------------------------------------------------------------------
snippet class
	class ${1:`Filename('$1', 'name')`} 
	{
		public:
			$1(${2});
			virtual ~$1();
	
		private:
			struct PrvImpl;
			PrvImpl * pim;  
			${3:/* data */}
	}
	#---------------------------------------------------------------------------
	$1::$1(${2}):pim(new PrvImpl()){};
	#---------------------------------------------------------------------------
	$1::~$1(){};
	#---------------------------------------------------------------------------
	struct $1::PrvImpl
	{
	}; 
	#--------------------------------------------------------------------------- 
#----------------------------------------------------------------------------
#jclass
#----------------------------------------------------------------------------
snippet jclass
	class ${1:`Filename('$1', 'name')`} 
	{
		private:
			struct PrvImpl;
			PrvImpl * pim;  
			$1 ( const $1 & );              // no copying only clone()
			$1 & operator=( const $1 & );   // no copying only clone()      	
		public:
			typedef boost::shared_ptr<$1> SP; 
			$1(${2});
			virtual ~$1();
	        static Device::SP create(uint32_t IPaddress); 
			${3:/* data */}
	};
	#---------------------------------------------------------------------------
	$1::$1(${2}):pim(new PrvImpl()){};
	#---------------------------------------------------------------------------
	$1::~$1(){};
	#---------------------------------------------------------------------------
	struct $1::PrvImpl
	{
	}; 
	#---------------------------------------------------------------------------
	$1::SP $1::create()
	{
		Device::SP l$1();
		return l$1;
	}        
	#---------------------------------------------------------------------------
#----------------------------------------------------------------------------
#cout
#----------------------------------------------------------------------------
snippet cout
	std::cout << "${1}" << $2 << std::endl;
#----------------------------------------------------------------------------
#endl
#----------------------------------------------------------------------------
snippet endl
	std::endl${1}
#----------------------------------------------------------------------------
#map
#----------------------------------------------------------------------------
snippet map
	std::map<${1:key}, ${2:value}> map${3};
#----------------------------------------------------------------------------
#namespace
#----------------------------------------------------------------------------
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
	};
#----------------------------------------------------------------------------
#readfile Into Vector
#----------------------------------------------------------------------------
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
#----------------------------------------------------------------------------
#try
#----------------------------------------------------------------------------
snippet try
	try{ 
	} 
	catch (Exception ex) {
		ex.printStackTrace();
	}
#----------------------------------------------------------------------------
#vector
#----------------------------------------------------------------------------
snippet vector
	std::vector<${1:char}> v${2};

