#-------------------------------------------------------------------------------
# bit
#-------------------------------------------------------------------------------
snippet bit simple
	x << 7;             //move left
	(x & 0x01) !=0      //check if lowest bit is set
snippet bit complex
	//char[] ---> uint32_t
	uint64_t ip_address;
	unsigned char octet[4] = {127,0,0,1};
	for (int i=0; i<4; i++) {
		ip_address += ( octet[3-i] << (i*8) );
	}

	//uint32_t ---> char[]
	for (int i=0; i<4; i++) {
		std::cout << i << ": " << ( (ip_address >> 8*i) & 0x000000FF  ) << "\n" ;
	}
#-------------------------------------------------------------------------------
# char_array
#-------------------------------------------------------------------------------
snippet char_array
	char *s[]={"Jan","Feb","Mar","April"};
	char** p = s;

	for( unsigned n = 0; n < 4; ++n ) {
		printf("%s\n", *p );
		++p;
	}
#-------------------------------------------------------------------------------
# main()
#-------------------------------------------------------------------------------
snippet main
	#include <iostream>


	int main()
	{
	   ${1}
	   return 0;
	}
#-------------------------------------------------------------------------------
# include <...>
#-------------------------------------------------------------------------------
snippet inc <
	#include <${1:stdio.h}>
#-------------------------------------------------------------------------------
# include "..."
#-------------------------------------------------------------------------------
snippet inc "
	#include "${1:`Filename("$1.h")`}"${2}
#-------------------------------------------------------------------------------
# #ifndef ... #define ... #endif
#-------------------------------------------------------------------------------
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
	    ${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
	    ${2}
	#endif
#-------------------------------------------------------------------------------
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)

#-------------------------------------------------------------------------------
snippet ifndef
	#ifndef ${1:`toupper(Filename('$1_H_', 'UNTITLED'))`}
	#define $1

	${2}

	#endif /* end of $1 */
#-------------------------------------------------------------------------------
#snippet ifndef
#	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
#	#define $1
#
#	${2}
#
#	#endif /* end of include: $1 */
#-------------------------------------------------------------------------------
# if condition
#-------------------------------------------------------------------------------
snippet if
	if (${1}) {
	    ${2:/* code */}
	}${3}
#-------------------------------------------------------------------------------
# else condition
#-------------------------------------------------------------------------------
snippet else
	else {
	    ${1}
	}${2}
#-------------------------------------------------------------------------------
# elif condition
#-------------------------------------------------------------------------------
snippet elif
	else if(${1}){
	    ${2:/*code*/}
	}${3}
#-------------------------------------------------------------------------------
# switch
#-------------------------------------------------------------------------------
snippet switch
	switch (${1:i}) {
	  case ${2:1} :
	    break;

	  case ${3:2} :
	    break;

	  default :
	    //default
	}
#-------------------------------------------------------------------------------
# tertiary conditional
#-------------------------------------------------------------------------------
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
#-------------------------------------------------------------------------------
# do While Loop
#-------------------------------------------------------------------------------
snippet do
	do {
	    ${2:/* code */}
	} while (${1:/* condition */});
#-------------------------------------------------------------------------------
# while Loop
#-------------------------------------------------------------------------------
snippet while
	while (${1:/* condition */}) {
	    ${2:/* code */}
	}
#-------------------------------------------------------------------------------
# for Loop
#-------------------------------------------------------------------------------
snippet for
	for (i16 ${1:i} = 0; $1 < ${2:.size()}; ++$1) {
	    ${4:/* code */}
	}
#-------------------------------------------------------------------------------
# custom For Loop
#-------------------------------------------------------------------------------
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	    ${5:/* code */}
	}
#-------------------------------------------------------------------------------
# function
#-------------------------------------------------------------------------------
snippet fun
	${1:void} ${2:f}(${3})
	{
	   ${4:/* code */}
	}
#-------------------------------------------------------------------------------
# function Declaration
#-------------------------------------------------------------------------------
snippet fund
	${1:void} ${2:f}(${3});${4}
#-------------------------------------------------------------------------------
snippet ret
	return
#-------------------------------------------------------------------------------
# typedef
#-------------------------------------------------------------------------------
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
#-------------------------------------------------------------------------------
# struct
#-------------------------------------------------------------------------------
snippet struct
	struct ${1:`Filename('$1', 'name')`}
	{
		$1() {};
	};
#-------------------------------------------------------------------------------
# typedef struct
#-------------------------------------------------------------------------------
snippet tds
	typedef struct ${2:_$1 }{
	    ${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
#-------------------------------------------------------------------------------
# typdef enum
#-------------------------------------------------------------------------------
snippet tde
	typedef enum {
	    ${1:/* data */}
	} ${2:foo};
#-------------------------------------------------------------------------------
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
#-------------------------------------------------------------------------------
snippet pr
	printf("${1:%s}\n"${2});${3}
#-------------------------------------------------------------------------------
# fprintf (again, this isn't as nice as TextMate's version, but it works)
#-------------------------------------------------------------------------------
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
#snippet .
#	[${1}]${2}
snippet un
	unsigned${1}
snippet ui
	uint32_t${1}
#-------------------------------------------------------------------------------
# method
#-------------------------------------------------------------------------------
snippet ()
	${3} ${1}(${2})
	{
		${4}
	};
