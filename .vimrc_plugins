"#}}}"#-------------------------------------------------------------------------
"# TagList
"#--------------------------------------------------------------------------#{{{
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_Use_Right_Window = 0
let Tlist_WinWidth = 35
let Tlist_Exit_OnlyWindow = 1     " exit if taglist is last window open
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Use_SingleClick = 1
let Tlist_Show_One_File = 1       " Only show tags for current buffer
let TlistHighlightTag = 1
let Tlist_Highlight_Tag_On_BufEnter = 1
let Tlist_Auto_Highlight_Tag = 1
let Tlist_Show_Menu = 1

let g:tagbar_sort = 0
let g:tagbar_compact  = 0

noremap <S-F4> :TlistToggle<CR>
noremap <F4> :TagbarToggle<CR>


"#}}}"#-------------------------------------------------------------------------
"# OmniComplete
"#--------------------------------------------------------------------------#{{{
"au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
"set completeopt=menuone,menu,longest  ",preview  "for scratch window
"inoremap <C-o> <C-x><C-o>
"inoremap <C-u> <C-x><C-u>
"inoremap <C-space> <C-x><C-u>
"inoremap <C-n> <C-x><C-n>
"inoremap <C-f> <C-x><C-f>
""automatically run down if omnicomplete
"inoremap <expr> <space> ((pumvisible())?("\<Down>"):("<space>"))

"#}}}"#-------------------------------------------------------------------------
"# FuzzyFinder
"#--------------------------------------------------------------------------#{{{
"noremap <C-f> :FufRenewCache<CR>:FufFile<CR>


"#}}}"#-------------------------------------------------------------------------
"# BufExplorer
"#--------------------------------------------------------------------------#{{{
"#Sort by:
"#   'extension', 'fullpath', 'mru' (recently used), 'name, 'number'
"#-------------------------------------------------------------------------
let g:bufExplorerSortBy='name'
let g:bufExplorerDefaultHelp = 0
let g:bufExplorerSplitBelow = 0

noremap <C-b> :BufExplorer<CR>

"#}}}"#-------------------------------------------------------------------------
"#  CtrlP
"#--------------------------------------------------------------------------#{{{
let g:ctrlp_map = 'F7'
let g:ctrlp_follow_symlinks=1
let g:ctrlp_use_caching = 1     " <F5> while inside |CtrlP| will purge the cache
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_working_path_mode = 2
let g:ctrlp_custom_ignore = '\.metadata\|\.git\|\.project\|\.cproject\|\.directory|\.o$'
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript']

nnoremap <C-p> :CtrlP ~/workspace/ssi/trunk/unix<CR>
nnoremap <C-f> :CtrlP ~/<CR>
nnoremap <C-t> :CtrlPTag<CR>


"#}}}"#-------------------------------------------------------------------------
"# netrw
"#--------------------------------------------------------------------------#{{{
"let g:netrw_banner = 0
"let g:netrw_liststyle = 3
"let g:netrw_browse_split = 4
"let g:netrw_altv = 1
"let g:netrw_winsize = 25
"augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END
"

"#}}}"#-------------------------------------------------------------------------
"# NERDTree
"#--------------------------------------------------------------------------#{{{
let NERDTreeWinPos="left"
let NERDTreeDirArrows=0
let NERDTreeMouseMode=1
nnoremap <silent> <C-e> <Esc>:NERDTreeToggle . <CR> <C-w> l

" function! NERDTreeQuit()
"   redir => buffersoutput
"   silent buffers
"   redir END
" "                     1BufNo  2Mods.     3File           4LineNo
"   let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
"   let windowfound = 0
"
"   for bline in split(buffersoutput, "\n")
"     let m = matchlist(bline, pattern)
"
"     if (len(m) > 0)
"       if (m[2] =~ '..a..')
"         let windowfound = 1
"       endif
"     endif
"   endfor
"
"   if (!windowfound)
"     quitall
"   endif
" endfunction
" autocmd! WinEnter * call NERDTreeQuit()


"#}}}"#-------------------------------------------------------------------------
"# YCM
"#--------------------------------------------------------------------------#{{{
" ./install.py --clang-completer
" git submodule update --init --recursive
" install: ncurses5-compat-libs
" install: libtinfo and link libtinfo.5 to 6
"-------------------------------------------------------------------------------

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

"let g:ycm_complete_in_comments=1  " turn on completion in comments
"let g:ycm_confirm_extra_conf=0  " load ycm conf by default
"let g:ycm_collect_identifiers_from_tags_files=1  " turn on tag completion
"set completeopt-=preview    "" only show completion as a list instead of a sub-window
"let g:ycm_min_num_of_chars_for_completion=1 " start completion from the first character
"let g:ycm_cache_omnifunc=0     " don't cache completion items
"let g:ycm_seed_identifiers_with_syntax=1  " complete syntax keywords



"#}}}"#-------------------------------------------------------------------------
"# snippets
"#--------------------------------------------------------------------------#{{{
:imap <C-j> <Plug>snipMateNextOrTrigger <CR>
